"""Test api endpoint that accepts Petition objects and returns a package of rendered petition documents."""
import json
import pytest
from django.core.files import File
from RecordLib.analysis import Analysis
from RecordLib.utilities.serializers import to_serializable
from RecordLib.petitions.petitions import Expungement
from RecordLib.analysis.ruledefs import expunge_nonconvictions
from cleanslate.models import ExpungementPetitionTemplate, SealingPetitionTemplate


def test_download_petition(admin_user, admin_client, example_case):
    """
    Post a set of Petitions to the server to generate them and download the docx files.
    """

    # The user needs to have configured templates to use for petitions.
    with open("templates/petitions/790ExpungementTemplate.docx", "rb") as tp:
        exp_petition = ExpungementPetitionTemplate.objects.create(
            name="790ExpungementTemplate.docx", file=File(tp)
        )
    with open("templates/petitions/791SealingTemplate.docx", "rb") as tp:
        sealing_petition = SealingPetitionTemplate.objects.create(
            name="790SealingTemplate.docx", file=File(tp)
        )

    admin_user.userprofile.expungement_petition_template = exp_petition
    admin_user.userprofile.sealing_petition_template = sealing_petition
    admin_user.userprofile.save()

    data = {
        "petitions": [
            {
                "attorney": {
                    "organization": "Legal Aid Org",
                    "full_name": "Abraham Lincoln",
                    "organization_address": {
                        "line_one": "1234 S. St.",
                        "city_state_zip": "Phila PA",
                    },
                    "organization_phone": "123-123-1234",
                    "bar_id": "11222",
                },
                "client": {"first_name": "Suzy", "last_name": "Smith",},
                "cases": [to_serializable(example_case)],
                "expungement_type": Expungement.ExpungementTypes.FULL_EXPUNGEMENT,
                "petition_type": "Expungment",  # as opposed to "Sealing",
                "summary_expuntement_language": "and Petitioner is over 70 years old and has been free of arrest for more than ten years since this summary conviction.",
                "service_agencies": ["The Zoo", "Jims Pizza Palace"],
                "include_crim_hist_report": "",
                "ifp_message": "Please allow this petition.",
            }
        ]
    }
    resp = admin_client.post(
        "/api/record/petitions/", data=data, content_type="application/json"
    )
    assert resp.status_code == 200
    assert resp.__getitem__("Content-Type") == "application/zip"


@pytest.mark.django_db
def test_render_petitions(admin_user, admin_client, example_crecord, example_attorney):
    """
    POST /api/record/petitions takes a set of petition objects and returns a zipped download of
    generatd petitions.

    This test generates an analysis first, and posts the Petitions generated by the Analysis.
    """

    # The user needs to have configured templates to use for petitions.
    with open("templates/petitions/790ExpungementTemplate.docx", "rb") as tp:
        exp_petition = ExpungementPetitionTemplate.objects.create(
            name="790ExpungementTemplate.docx", file=File(tp)
        )
    with open("templates/petitions/791SealingTemplate.docx", "rb") as tp:
        sealing_petition = SealingPetitionTemplate.objects.create(
            name="790SealingTemplate.docx", file=File(tp)
        )

    admin_user.userprofile.expungement_petition_template = exp_petition
    admin_user.userprofile.sealing_petition_template = sealing_petition
    admin_user.userprofile.save()

    example_crecord.cases[0].charges[0].disposition = "Not Guilty"
    ans = Analysis(example_crecord).rule(expunge_nonconvictions)
    petitions = []
    for decision in ans.decisions:
        petitions.append(*decision.value)
    for p in petitions:
        p.attorney = example_attorney
    resp = admin_client.post(
        "/api/record/petitions/",
        json.dumps({"petitions": petitions}, default=to_serializable),
        content_type="application/json",
    )
    assert resp.status_code == 200
    assert resp.__getitem__("Content-Type") == "application/zip"
